{
  "#inc": {
    "prefix": "inc",
    "body": ["#include <$0>"],
    "description": "snippet for #include"
  },

  "#inclocal": {
    "prefix": "Inc",
    "body": ["#include \"$0\""],
    "description": "snippet for #include"
  },

  "using": {
    "prefix": "using",
    "body": ["using namespace $0"],
    "description": "snippet for using namespace"
  },

  "for": {
    "prefix": "for",
    "body": ["for (int ${1} = ${2:0}; ${1} < ${3:length}; ++${1})", "{", "\t$0", "}\n"],
    "description": "snippet for a for loop"
  },

  "foreach": {
    "prefix": "fore",
    "body": ["for (auto &$1 : $2)", "{", "\t$0", "}\n"],
    "description": "snippet for a for-auto loop"
  },

  "do": {
    "prefix": "do",
    "body": ["do", "{", "\t$0", "} while($1);\n"],
    "description": "snippet for a do...while loop"
  },

  "while": {
    "prefix": "while",
    "body": ["while ($1)", "{", "\t$0", "}\n"],
    "description": "snippet for a while loop"
  },

  "if": {
    "prefix": "if",
    "body": ["if ($1)", "{", "\t$0", "}"],
    "description": "snippet for an if statement"
  },

  "else": {
    "prefix": "else",
    "body": ["else", "{", "\t$0", "}\n"],
    "description": "snippet for else"
  },

  "else if": {
    "prefix": "else if",
    "body": ["else if ($1)", "{", "\t$0", "}"],
    "description": "snippet for else-if"
  },

  "enum": {
    "prefix": "enum",
    "body": ["enum class $1", "{", "\t$0", "};\n"],
    "description": "snippet for an enum declaration"
  },

  "class": {
    "prefix": "class",
    "body": ["class $0", "{", "", "};\n"],
    "description": "snippet for a class declaration"
  },

  "class inherit": {
    "prefix": "classi",
    "body": ["class $1 :public $0", "{", "", "};\n"],
    "description": "snippet for a class-inherit declaration"
  },

  "namespace": {
    "prefix": "namespace",
    "body": ["namespace $1", "{", "\t$0", "}//$1\n"]
  },

  "once": {
    "prefix": "once",
    "body": [
      "#pragma once",
      "#ifndef $1",
      "#define $1",
      "$2",
      "#endif  //!$1"
    ],
    "description": "snippet for includeguard"
  },

  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef  ${1}", "$0", "#endif  //$1"],
    "description": "snippet for #if"
  },

  "struct": {
    "prefix": "struct",
    "body": ["struct $1", "{", "\t$0", "};\n"],
    "description": "snippet for a struct declaration"
  },

  "switch": {
    "prefix": "switch",
    "body": [
      "switch ($1)",
      "{",
      "  case $2:",
      "\t$0",
      "\tbreak;",
      "\n",
      "\n",
      "  default:",
      "\tbreak;",
      "}"
    ],
    "description": "snippet for a switch statement"
  },

  "case": {
    "prefix": "case",
    "body": ["  case $1:", "\t$0", "\tbreak;"],
    "description": "snippet for case (...)"
  },

  "try": {
    "prefix": "try",
    "body": ["try", "{", "\t$1", "}", "catch (std::exception const& $2)", "{", "\t$0", "}\n"],
    "description": "snippet for a try-catch block"
  },

  "union": {
    "prefix": "union",
    "body": ["union $1", "{", "\t$0", "};\n"],
    "description": "snippet for a union declaration"
  },

  "#def": {
    "prefix": "#def",
    "body": ["#define  $1  $2\n"],
    "description": "snippet for #def"
  },

  "main": {
    "prefix": "main",
    "body": [
      "int\tmain(int argc, char **argv)",
      "{",
      "\t$0",

      "\n",
      "\tsystem(\"pause\");",
      "\treturn 0;",
      "}\n"
    ],
    "description": "snippet for a main function declaration"
  },

  "fileheader": {
    "prefix": "head",
    "body": [
      "/**",
      "******************************************************************************",
      "* @file:   $TM_FILENAME",
      "*",
      "* @author: $1",
      "* @date:   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE",
      "* @brief:  $2",
      "*******************************************************************************",
      "**/"
    ],
    "description": "snippet for a file header"
  },

  "template": {
    "prefix": "tem",
    "body": ["template <typename $0>"],
    "description": "snippet for a template"
  }
}
